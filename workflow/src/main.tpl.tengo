wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")

pfPseudotimeConv := import(":pf-pseudotime-conv")

wf.prepare(func(args){
	return {
		resolvedInput: wf.resolve(args.principalComponentsRef, { errIfMissing: true }),
		resolvedClusters: wf.resolve(args.clustersRef, { errIfMissing: true })
	}
})

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()
	embeddings := args.resolvedInput
	clusters := args.resolvedClusters
	inputSpec := embeddings.spec

	csvEmbeddings := xsv.exportFrame([embeddings], "csv", {})
	csvClusters := xsv.exportFrame([clusters], "csv", {})

	pseudotimeInference := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.pseudotime-inference.software:pseudotime-dpt")).
		addFile("embeddings.csv", csvEmbeddings).
		addFile("clusters.csv", csvClusters).
		arg("--pca_csv").arg("embeddings.csv").
		arg("--cluster_csv").arg("clusters.csv").
		arg("--out_prefix").arg("dpt").
		saveFile("dpt_pseudotime.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	pseudotimeScoresImportParams := pfPseudotimeConv.getColumns(blockId, inputSpec)
	pseudotimePf := xsv.importFile(pseudotimeInference.getFile("dpt_pseudotime.csv"), "csv", pseudotimeScoresImportParams)

	exports := {
		pseudotimeScores : {
            spec: pseudotimePf["pseudotimedpt.spec"],
            data: pseudotimePf["pseudotimedpt.data"]
            }
    }

	return {
		outputs: {
			pseudotimeScores: pframes.exportFrame(pseudotimePf)
		},
		exports: exports
	}
})

